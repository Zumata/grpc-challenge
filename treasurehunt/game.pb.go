// Code generated by protoc-gen-go.
// source: game.proto
// DO NOT EDIT!

/*
Package treasurehunt is a generated protocol buffer package.

It is generated from these files:
	game.proto

It has these top-level messages:
	JoinRequest
	Position
	JoinResponse
	MoveRequest
	MoveResponse
	GetTreasureRequest
	GetTreasureResponse
*/
package treasurehunt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MoveRequest_Direction int32

const (
	MoveRequest_LEFT  MoveRequest_Direction = 0
	MoveRequest_RIGHT MoveRequest_Direction = 1
	MoveRequest_UP    MoveRequest_Direction = 2
	MoveRequest_DOWN  MoveRequest_Direction = 3
)

var MoveRequest_Direction_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
	2: "UP",
	3: "DOWN",
}
var MoveRequest_Direction_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
	"UP":    2,
	"DOWN":  3,
}

func (x MoveRequest_Direction) String() string {
	return proto.EnumName(MoveRequest_Direction_name, int32(x))
}

type JoinRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}

type Position struct {
	X int64 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}

type JoinResponse struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Position *Position `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	MaxX     int64     `protobuf:"varint,3,opt,name=max_x" json:"max_x,omitempty"`
	MaxY     int64     `protobuf:"varint,4,opt,name=max_y" json:"max_y,omitempty"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}

func (m *JoinResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type MoveRequest struct {
	Direction MoveRequest_Direction `protobuf:"varint,1,opt,name=direction,enum=treasurehunt.MoveRequest_Direction" json:"direction,omitempty"`
}

func (m *MoveRequest) Reset()         { *m = MoveRequest{} }
func (m *MoveRequest) String() string { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()    {}

type MoveResponse struct {
	Position       *Position `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	TreasureGotten bool      `protobuf:"varint,2,opt,name=treasureGotten" json:"treasureGotten,omitempty"`
	Score          int64     `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (m *MoveResponse) Reset()         { *m = MoveResponse{} }
func (m *MoveResponse) String() string { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()    {}

func (m *MoveResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type GetTreasureRequest struct {
}

func (m *GetTreasureRequest) Reset()         { *m = GetTreasureRequest{} }
func (m *GetTreasureRequest) String() string { return proto.CompactTextString(m) }
func (*GetTreasureRequest) ProtoMessage()    {}

type GetTreasureResponse struct {
	Position []*Position `protobuf:"bytes,1,rep,name=position" json:"position,omitempty"`
}

func (m *GetTreasureResponse) Reset()         { *m = GetTreasureResponse{} }
func (m *GetTreasureResponse) String() string { return proto.CompactTextString(m) }
func (*GetTreasureResponse) ProtoMessage()    {}

func (m *GetTreasureResponse) GetPosition() []*Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func init() {
	proto.RegisterEnum("treasurehunt.MoveRequest_Direction", MoveRequest_Direction_name, MoveRequest_Direction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for TreasureHunt service

type TreasureHuntClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	GetTreasure(ctx context.Context, in *GetTreasureRequest, opts ...grpc.CallOption) (*GetTreasureResponse, error)
}

type treasureHuntClient struct {
	cc *grpc.ClientConn
}

func NewTreasureHuntClient(cc *grpc.ClientConn) TreasureHuntClient {
	return &treasureHuntClient{cc}
}

func (c *treasureHuntClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/treasurehunt.TreasureHunt/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasureHuntClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/treasurehunt.TreasureHunt/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasureHuntClient) GetTreasure(ctx context.Context, in *GetTreasureRequest, opts ...grpc.CallOption) (*GetTreasureResponse, error) {
	out := new(GetTreasureResponse)
	err := grpc.Invoke(ctx, "/treasurehunt.TreasureHunt/GetTreasure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TreasureHunt service

type TreasureHuntServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	GetTreasure(context.Context, *GetTreasureRequest) (*GetTreasureResponse, error)
}

func RegisterTreasureHuntServer(s *grpc.Server, srv TreasureHuntServer) {
	s.RegisterService(&_TreasureHunt_serviceDesc, srv)
}

func _TreasureHunt_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TreasureHuntServer).Join(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TreasureHunt_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TreasureHuntServer).Move(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TreasureHunt_GetTreasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetTreasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TreasureHuntServer).GetTreasure(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _TreasureHunt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "treasurehunt.TreasureHunt",
	HandlerType: (*TreasureHuntServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _TreasureHunt_Join_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _TreasureHunt_Move_Handler,
		},
		{
			MethodName: "GetTreasure",
			Handler:    _TreasureHunt_GetTreasure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
